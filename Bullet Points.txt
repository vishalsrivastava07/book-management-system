1. SDLC: ->

Phase 1: Requirements gathering and analysis
Phase 2: System design and architecture
Phase 3: Implementation and coding
Phase 4: Testing and quality assurance
Phase 5: Deployment and release
Phase 6: Maintenance and support

2. Client-Server Model: ->
The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, 
called servers, and service requesters called clients.

Working:
1. User enters the URL(Uniform Resource Locator) of the website or file. The Browser then requests the DNS(DOMAIN NAME SYSTEM) Server.
2. DNS Server lookup for the address of the WEB Server.
3. The DNS Server responds with the IP address of the WEB Server.
4. The Browser sends over an HTTP/HTTPS request to the WEB Serverâ€™s IP (provided by the DNS server).
5. The Server sends over the necessary files for the website.
6. The Browser then renders the files and the website is displayed. This rendering is done with the help of DOM interpreter, 
7. CSS interpreter, and JS Engine collectively known as the JIT or (Just in Time) Compilers.

3. UI VS API 

UI -> The graphical or visual interface through which users interact with a system.
API -> A set of protocols that allow different software applications to communicate.

4. Single Page vs Multi-Page Applications

Single Page Application (SPA) -> Web applications that load a single HTML page and dynamically update content.
Multi-Page Application (MPA) -> Web applications with multiple HTML pages that reload for each interaction.

5. HTTP vs HTTPS

HTTP -> Protocol for transferring data over the web.
HTTPS -> HTTP with secure encryption using SSL/TLS.

6. Agile and Scrum Basics

Agile -> Agile is a project management approach focused on flexibility and collaboration. 
The goal of Agile is to break down large projects into smaller, manageable iterations (sprints) to receive feedback quickly and make iterative improvements.

Principles of Agile:

Focus on customer satisfaction.
Embrace changes and remain flexible.
Deliver frequently working products.
Promote team collaboration and self-organization.

Scrum -> Scrum is an Agile framework that provides a structured approach for teams to manage complex projects. 
Scrum emphasizes specific roles, ceremonies, and artifacts to ensure effective collaboration and progress.

Main Components of Scrum:
-Roles 
-Ceremonies
-Artifacts


7. Git: -> Git is a distributed version control system designed to track changes in files and coordinate work among multiple people. 
It is widely used in software development to manage source code.

Key Features of Git:
-Version Control
-Distributed System
-Branching and Merging
-Collaboration
-Efficiency
