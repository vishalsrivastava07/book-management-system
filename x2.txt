// //We implemented interface for book Structure and instead of classes we implemented interface because 
// // Class - More suitable when you need methods and implementation
// // Interface - Better for data structures

// // Types and Interfaces
// interface Book<T = any> {
//     id?: string;
//     title: string;
//     author: string;
//     isbn: string;
//     pubDate: string;
//     genre: string;
//     price: number;
//     purchaseLink: string;
//     bookType: string;
//     metadata?: T;
// }

// interface FilterOptions {
//     searchTerm: string;
//     sortOption: string;
//     genreFilter: string;
// }

// // It handles the Validation Service
// class ValidationService {
//     validateISBN(isbn: string): boolean {
//         return /^\d+$/.test(isbn);
//     }

//     validateBook(book: Book): { isValid: boolean; errors: string[] } {
//         const errors: string[] = [];
        
//         if (!book.title?.trim()) errors.push("Title is required");
//         if (!book.author?.trim()) errors.push("Author is required");
//         if (!this.validateISBN(book.isbn)) errors.push("ISBN must contain only numeric characters");
//         if (!book.pubDate) errors.push("Publication date is required");
        
//         return {
//             isValid: errors.length === 0,
//             errors
//         };
//     }
// }

// // Storage Service
// //It manages all the local storage operations
// class StorageService {
//     private readonly BOOKS_KEY = "books"; //Prevents external access (private)
//     private readonly EDIT_BOOK_KEY = "editBook"; //Prevents modification anywhere (readonly)

//     getBooks(): Book[] {
//         return JSON.parse(localStorage.getItem(this.BOOKS_KEY) || "[]");
//     }

//     saveBooks(books: Book[]): void {
//         localStorage.setItem(this.BOOKS_KEY, JSON.stringify(books));
//     }

//     getEditBookData(): { book: Book; index: number } | null {
//         const data = localStorage.getItem(this.EDIT_BOOK_KEY);
//         return data ? JSON.parse(data) : null;
//     }

//     saveEditBookData(book: Book, index: number): void {
//         localStorage.setItem(this.EDIT_BOOK_KEY, JSON.stringify({ book, index }));
//     }

//     clearEditBookData(): void {
//         localStorage.removeItem(this.EDIT_BOOK_KEY);
//     }
// }


// // Define the structure of the API response 
// // if we can't make interfaces then we have to use any keyword
// interface APIResponse {
//     title: string;
//     id: number;
//     body: string;
//     userId: number;
// }
// // API Service
// //It handles all the API calls 
// class BookAPIService {
//     private readonly API_URL = "https://jsonplaceholder.typicode.com/posts";
    

//     async fetchAPIBooks(): Promise<Book[]> {
//         try {
//             const response = await fetch(this.API_URL);
//             const apiBooks = await response.json();
//             if (!response.ok) throw new Error("Failed to fetch data from the server.");
//             return apiBooks.map((item: APIResponse) => ({
//                 title: item.title,
//                 author: "Author",
//                 isbn: "12",
//                 pubDate: "2025-01-01",
//                 genre: "API Genre",
//                 price: 20.0,
//                 purchaseLink: "https://www.amazon.in/s?k=books&crid=744W0CQGEHJX&sprefix=book%2Caps%2C301&ref=nb_sb_noss_2",
//                 bookType: "EBook",
//             }));
//         } catch (error) {
//             console.error("Error fetching books from API:", error);
//             return [];
//         }
//     }
// }

// // Book Service (Business Logic)
// //It handles all the core logic like getAllBooks, CalculateBookAge
// class BookService {
//     private storageService: StorageService;
//     private apiService: BookAPIService;
//     private validationService: ValidationService;

//     constructor() {
//         this.storageService = new StorageService();
//         this.apiService = new BookAPIService();
//         this.validationService = new ValidationService();
//     }

//     async getAllBooks(): Promise<Book[]> {
//         const localBooks = this.storageService.getBooks();
//         const apiBooks = await this.apiService.fetchAPIBooks();
//         return [...localBooks, ...apiBooks];
//     }

//     calculateBookAge(pubDate: string): string {
//         const publicationDate = new Date(pubDate);
//         const currentDate = new Date();
//         const age = currentDate.getFullYear() - publicationDate.getFullYear();
//         return age > 0 ? `${age} year(s)` : "Less than a year";
//     }

//     filterBooks(books: Book[], options: FilterOptions): Book[] {
//         let filteredBooks = books.filter(book =>
//             (book.title?.toLowerCase().includes(options.searchTerm.toLowerCase()) ||
//              book.author?.toLowerCase().includes(options.searchTerm.toLowerCase()) ||
//              book.genre?.toLowerCase().includes(options.searchTerm.toLowerCase())) &&
//             (options.genreFilter === "" || book.genre?.toLowerCase() === options.genreFilter.toLowerCase())
//         );

//         if (options.sortOption === "asc") {
//             filteredBooks.sort((a, b) => a.title.toLowerCase().localeCompare(b.title.toLowerCase()));
//         } else if (options.sortOption === "desc") {
//             filteredBooks.sort((a, b) => b.title.toLowerCase().localeCompare(a.title.toLowerCase()));
//         }

//         return filteredBooks;
//     }

//     saveBook(e: Event) {
//         e.preventDefault();

//         const title = (document.getElementById("title") as HTMLInputElement).value;
//         const author = (document.getElementById("author") as HTMLInputElement).value;
//         const isbn = (document.getElementById("isbn") as HTMLInputElement).value;
//         const pubDate = (document.getElementById("pub-date") as HTMLInputElement).value;
//         const genre = (document.getElementById("genre") as HTMLInputElement).value;
//         const price = (document.getElementById("price") as HTMLInputElement).value;
//         const purchaseLink = (document.getElementById("purchase-link") as HTMLInputElement).value;
//         const bookType = (document.getElementById("book-type") as HTMLInputElement).value;

//         const books = JSON.parse(localStorage.getItem("books") || "[]");
//         const editIndex = (document.getElementById("edit-index") as HTMLInputElement).value;

//         if (editIndex !== "") {
//             books[editIndex] = { title, author, isbn, pubDate, genre, price, purchaseLink, bookType };
//         } else {
//             books.push({ title, author, isbn, pubDate, genre, price, purchaseLink, bookType });
//         }

//         localStorage.setItem("books", JSON.stringify(books));
//         alert("Book saved successfully!");
//         window.location.href = "index.html";
//     }
//     deleteBook(index: number): void {
//         const books = this.storageService.getBooks();
//         books.splice(index, 1);
//         this.storageService.saveBooks(books);
//     }
// }

// // UI Component
// //It manages UI renders
// class BookListUI {
//     private bookList: HTMLElement | null;

//     constructor(containerId: string) {
//         this.bookList = document.getElementById(containerId);
//     }

//     clearList(): void {
//         if (this.bookList) {
//             this.bookList.innerHTML = "";
//         }
//     }

//     showMessage(message: string, colspan: number = 8): void {
//         if (this.bookList) {
//             this.bookList.innerHTML = `<tr><td colspan="${colspan}">${message}</td></tr>`;
//         }
//     }

//     renderBook(book: Book, index: number, bookAge: string): void {
//         if (!this.bookList) return;

//         const row = document.createElement("tr");
//         row.innerHTML = `
//             <td>${book.title}</td>
//             <td>${book.author}</td>
//             <td>${book.isbn || "N/A"}</td>
//             <td>${book.pubDate || "N/A"}</td>
//             <td>${book.genre || "N/A"}</td>
//             <td>${book.bookType || "N/A"}</td>
//             <td>${book.price ? `$${book.price}` : "N/A"}</td>
//             <td>${bookAge}</td>
//             <td><a href="${book.purchaseLink}" target="_blank">Purchase</a></td>
//             <td>
//                 <div class="button-container">
//                     <button class="edit-btn" data-index="${index}">Edit</button>
//                     <button class="delete-btn" data-index="${index}">Delete</button>
//                     <button class="details-btn" data-index="${index}">Details</button>
//                 </div>
//             </td>
//         `;

//         this.bookList.appendChild(row);
//     }
// }

// // Event Handler Class
// class BookEventHandler {
//     constructor(private manager: BookManager) {}

//     initializeListeners(): void {
//         document.addEventListener("DOMContentLoaded", () => this.manager.init());

//         const searchBar = this.manager.searchBar;
//         searchBar?.addEventListener("input", (e) => {
//             this.manager.loadBooks((e.target as HTMLInputElement).value);
//         });

//         const filterFiction = this.manager.filterFiction;
//         filterFiction?.addEventListener("click", () => 
//             this.manager.loadBooks(searchBar?.value || "", "", "fiction")
//         );

//         const filterNonFiction = this.manager.filterNonFiction;
//         filterNonFiction?.addEventListener("click", () => 
//             this.manager.loadBooks(searchBar?.value || "", "", "non-fiction")
//         );

//         const clearFiltersBtn = this.manager.clearFiltersBtn;
//         clearFiltersBtn?.addEventListener("click", () => {
//             if (searchBar) searchBar.value = "";
//             this.manager.loadBooks();
//         });

//         const sortAscBtn = this.manager.sortAscBtn;
//         sortAscBtn?.addEventListener("click", () => 
//             this.manager.loadBooks(searchBar?.value || "", "asc")
//         );

//         const sortDescBtn = this.manager.sortDescBtn;
//         sortDescBtn?.addEventListener("click", () => 
//             this.manager.loadBooks(searchBar?.value || "", "desc")
//         );

//         document.addEventListener("click", (e) => {
//             const target = e.target as HTMLElement;
//             if (target.classList.contains("edit-btn")) {
//                 const index = target.getAttribute("data-index");
//                 if (index) this.manager.editBook(Number(index));
//             } else if (target.classList.contains("delete-btn")) {
//                 const index = target.getAttribute("data-index");
//                 if (index) this.manager.deleteBook(Number(index));
//             } else if (target.classList.contains("details-btn")) {
//                 const index = target.getAttribute("data-index");
//                 if (index) this.manager.showBookDetails(Number(index));
//             }
//         });
//     }
// }


// class BookManager {
//     private bookService: BookService;
//     private ui: BookListUI;
//     private storageService: StorageService;

//     private eventHandler: BookEventHandler;

//     searchBar: HTMLInputElement | null;
//     filterFiction: HTMLButtonElement | null;
//     filterNonFiction: HTMLButtonElement | null;
//     clearFiltersBtn: HTMLButtonElement | null;
//     sortAscBtn: HTMLButtonElement | null;
//     sortDescBtn: HTMLButtonElement | null;

//     constructor() {
//         this.bookService = new BookService();
//         this.ui = new BookListUI("book-list");
//         this.storageService = new StorageService();

//         // Initialize UI elements
//         this.searchBar = document.getElementById("search-bar") as HTMLInputElement;
//         this.filterFiction = document.getElementById("filter-fiction") as HTMLButtonElement;
//         this.filterNonFiction = document.getElementById("filter-non-fiction") as HTMLButtonElement;
//         this.clearFiltersBtn = document.getElementById("clear-filters") as HTMLButtonElement;
//         this.sortAscBtn = document.getElementById("sort-asc") as HTMLButtonElement;
//         this.sortDescBtn = document.getElementById("sort-desc") as HTMLButtonElement;

//         // Delegate event listener setup to BookEventHandler
//         this.eventHandler = new BookEventHandler(this);
//         this.eventHandler.initializeListeners();
//     }

//     async loadBooks(filter: string = "", sortOption: string = "", genreFilter: string = ""): Promise<void> {
//         this.ui.clearList();

//         try {
//             const books = await this.bookService.getAllBooks();
//             const filteredBooks = this.bookService.filterBooks(books, {
//                 searchTerm: filter,
//                 sortOption,
//                 genreFilter
//             });

//             if (filteredBooks.length === 0) {
//                 this.ui.showMessage("No books found.");
//             } else {
//                 filteredBooks.forEach((book, index) => {
//                     const bookAge = this.bookService.calculateBookAge(book.pubDate);
//                     this.ui.renderBook(book, index, bookAge);
//                 });
//             }
//         } catch (error) {
//             console.error("Error loading books:", error);
//             this.ui.showMessage("Failed to load books. Please try again later.");
//         }
//     }

//     editBook(index: number): void {
//         const books = this.storageService.getBooks();
//         const book = books[index];
//         this.storageService.saveEditBookData(book, index);
//         window.location.href = "add-book.html";
//     }

//     deleteBook(index: number): void {
//         this.bookService.deleteBook(index);
//         this.loadBooks();
//     }

//     showBookDetails(index: number): void {
//         const books = this.storageService.getBooks();
//         const book = books[index];
//         if (book) {
//             const bookAge = this.bookService.calculateBookAge(book.pubDate);
//             alert(`Title: ${book.title}
//                 Author: ${book.author}
//                 ISBN: ${book.isbn || "N/A"}
//                 Publication Date: ${book.pubDate || "N/A"}
//                 Age: ${bookAge}
//                 Genre: ${book.genre || "N/A"}
//                 Book Type: ${book.bookType || "N/A"}
//                 Price: ${book.price ? `$${book.price}` : "N/A"}
//                 Purchase Link: ${book.purchaseLink}`);
//         } else {
//             alert("Book details not found.");
//         }
//     }

//     init() {
//         document.getElementById("book-form")?.addEventListener("submit", (e) => this.saveBook(e));

//         this.searchBar?.addEventListener("input", (e) => {
//             this.loadBooks((e.target as HTMLInputElement).value);
//         });

//         this.filterFiction?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "", "fiction"));
//         this.filterNonFiction?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "", "non-fiction"));

//         this.clearFiltersBtn?.addEventListener("click", () => {
//             this.searchBar!.value = "";
//             this.loadBooks();
//         });

//         this.sortAscBtn?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "asc"));
//         this.sortDescBtn?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "desc"));

//         this.loadBooks();
//     }
//     saveBook(e: SubmitEvent): any {
//         throw new Error("Method not implemented.");
//     }

//     static prefillForm(): void {
//         const storageService = new StorageService();
//         const editData = storageService.getEditBookData();

//         if (editData) {
//             const { book, index } = editData;

//             (document.getElementById("title") as HTMLInputElement).value = book.title;
//             (document.getElementById("author") as HTMLInputElement).value = book.author;
//             (document.getElementById("isbn") as HTMLInputElement).value = book.isbn;
//             (document.getElementById("pub-date") as HTMLInputElement).value = book.pubDate;
//             (document.getElementById("genre") as HTMLInputElement).value = book.genre;
//             (document.getElementById("price") as HTMLInputElement).value = book.price.toString();
//             (document.getElementById("edit-index") as HTMLInputElement).value = index.toString();

//             storageService.clearEditBookData();
//         }
//     }
// }

// // Initialize
// const bookManager = new BookManager();

// document.addEventListener("DOMContentLoaded", () => {
//     BookManager.prefillForm();
// });







//  // Main Controller
// // class BookManager {
// //     private bookService: BookService;
// //     private ui: BookListUI;
// //     private storageService: StorageService;

// //     private searchBar: HTMLInputElement | null;
// //     private filterFiction: HTMLButtonElement | null;
// //     private filterNonFiction: HTMLButtonElement | null;
// //     private clearFiltersBtn: HTMLButtonElement | null;
// //     private sortAscBtn: HTMLButtonElement | null;
// //     private sortDescBtn: HTMLButtonElement | null;

// //     constructor() {
// //         this.bookService = new BookService();
// //         this.ui = new BookListUI("book-list");
// //         this.storageService = new StorageService();

// //         // Initialize UI elements
// //         this.searchBar = document.getElementById("search-bar") as HTMLInputElement;
// //         this.filterFiction = document.getElementById("filter-fiction") as HTMLButtonElement;
// //         this.filterNonFiction = document.getElementById("filter-non-fiction") as HTMLButtonElement;
// //         this.clearFiltersBtn = document.getElementById("clear-filters") as HTMLButtonElement;
// //         this.sortAscBtn = document.getElementById("sort-asc") as HTMLButtonElement;
// //         this.sortDescBtn = document.getElementById("sort-desc") as HTMLButtonElement;

// //         this.initializeEventListeners();
// //     }

// //     private initializeEventListeners(): void {
// //         document.addEventListener("DOMContentLoaded", () => this.init());
        
// //         this.searchBar?.addEventListener("input", (e) => {
// //             this.loadBooks((e.target as HTMLInputElement).value);
// //         });

// //         this.filterFiction?.addEventListener("click", () => 
// //             this.loadBooks(this.searchBar?.value || "", "", "fiction"));
        
// //         this.filterNonFiction?.addEventListener("click", () => 
// //             this.loadBooks(this.searchBar?.value || "", "", "non-fiction"));

// //         this.clearFiltersBtn?.addEventListener("click", () => {
// //             if (this.searchBar) this.searchBar.value = "";
// //             this.loadBooks();
// //         });

// //         this.sortAscBtn?.addEventListener("click", () => 
// //             this.loadBooks(this.searchBar?.value || "", "asc"));
        
// //         this.sortDescBtn?.addEventListener("click", () => 
// //             this.loadBooks(this.searchBar?.value || "", "desc"));

// //         document.addEventListener("click", (e) => {
// //             const target = e.target as HTMLElement;
// //             if (target.classList.contains("edit-btn")) {
// //                 const index = target.getAttribute("data-index");
// //                 if (index) this.editBook(Number(index));
// //             } else if (target.classList.contains("delete-btn")) {
// //                 const index = target.getAttribute("data-index");
// //                 if (index) this.deleteBook(Number(index));
// //             } else if (target.classList.contains("details-btn")) {
// //                 const index = target.getAttribute("data-index");
// //                 if (index) this.showBookDetails(Number(index));
// //             }
// //         });
// //     }

// //     async loadBooks(filter: string = "", sortOption: string = "", genreFilter: string = ""): Promise<void> {
// //         this.ui.clearList();

// //         try {
// //             const books = await this.bookService.getAllBooks();
// //             const filteredBooks = this.bookService.filterBooks(books, {
// //                 searchTerm: filter,
// //                 sortOption,
// //                 genreFilter
// //             });

// //             if (filteredBooks.length === 0) {
// //                 this.ui.showMessage("No books found.");
// //             } else {
// //                 filteredBooks.forEach((book, index) => {
// //                     const bookAge = this.bookService.calculateBookAge(book.pubDate);
// //                     this.ui.renderBook(book, index, bookAge);
// //                 });
// //             }
// //         } catch (error) {
// //             console.error("Error loading books:", error);
// //             this.ui.showMessage("Failed to load books. Please try again later.");
// //         }
// //     }

// //     editBook(index: number): void {
// //         const books = this.storageService.getBooks();
// //         const book = books[index];
// //         this.storageService.saveEditBookData(book, index);
// //         window.location.href = "add-book.html";
// //     }

// //     deleteBook(index: number): void {
// //         this.bookService.deleteBook(index);
// //         this.loadBooks();
// //     }

// //     showBookDetails(index: number): void {
// //         const books = this.storageService.getBooks();
// //         const book = books[index];
// //         if (book) {
// //             const bookAge = this.bookService.calculateBookAge(book.pubDate);
// //             alert(`Title: ${book.title}
// //                 Author: ${book.author}
// //                 ISBN: ${book.isbn || "N/A"}
// //                 Publication Date: ${book.pubDate || "N/A"}
// //                 Age: ${bookAge}
// //                 Genre: ${book.genre || "N/A"}
// //                 Book Type: ${book.bookType || "N/A"}
// //                 Price: ${book.price ? `$${book.price}` : "N/A"}
// //                 Purchase Link: ${book.purchaseLink}`);
// //         } else {
// //             alert("Book details not found.");
// //         }
// //     }

// //     init(): void {
// //         this.loadBooks();
// //     }

// //     static prefillForm(): void {
// //         const storageService = new StorageService();
// //         const editData = storageService.getEditBookData();

// //         if (editData) {
// //             const { book, index } = editData;

// //             (document.getElementById("title") as HTMLInputElement).value = book.title;
// //             (document.getElementById("author") as HTMLInputElement).value = book.author;
// //             (document.getElementById("isbn") as HTMLInputElement).value = book.isbn;
// //             (document.getElementById("pub-date") as HTMLInputElement).value = book.pubDate;
// //             (document.getElementById("genre") as HTMLInputElement).value = book.genre;
// //             (document.getElementById("price") as HTMLInputElement).value = book.price.toString();
// //             (document.getElementById("edit-index") as HTMLInputElement).value = index.toString();

// //             storageService.clearEditBookData();
// //         }
// //     }
// // }



// // validateISBN function
// const validateISBN = (isbn: string): boolean => {
//     return /^\d+$/.test(isbn);
// };

// class BaseManager {
//     constructor() {
//         document.addEventListener("DOMContentLoaded", () => this.init());
//     }


    
//     async fetchBooks(): Promise<any[]> {
//         const localBooks = JSON.parse(localStorage.getItem("books") || "[]");
//         try {
//             const response = await fetch("https://jsonplaceholder.typicode.com/posts");
//             if (!response.ok) throw new Error("Failed to fetch data from the server.");

//             const apiBooks = await response.json();

//             return [
//                 ...localBooks,
//                 ...apiBooks.map((item: any) => ({
//                     title: item.title,
//                     author: "Author",
//                     isbn: 12,
//                     pubDate: "2025-01-01",
//                     genre: "API Genre",
//                     price: 20.0,
//                     purchaseLink: "https://www.amazon.in/s?k=books&crid=744W0CQGEHJX&sprefix=book%2Caps%2C301&ref=nb_sb_noss_2",
//                     bookType: "EBook",
//                 })),
//             ];
//         } catch (error) {
//             console.error("Error fetching books from server:", error);
//             return localBooks;
//         }
//     }

//     //@logMethodParams
//     calculateBookAge(pubDate: string): string {
//         const publicationDate = new Date(pubDate);
//         const currentDate = new Date();
//         const age = currentDate.getFullYear() - publicationDate.getFullYear();
//         return age > 0 ? `${age} year(s)` : "Less than a year";
//     }

//     init() {}
// }

// class BookManager extends BaseManager {
//     bookList: HTMLElement | null;
//     searchBar: HTMLInputElement | null;
//     filterFiction: HTMLButtonElement | null;
//     filterNonFiction: HTMLButtonElement | null;
//     clearFiltersBtn: HTMLButtonElement | null;
//     sortAscBtn: HTMLButtonElement | null;
//     sortDescBtn: HTMLButtonElement | null;

//     constructor() {
//         super();
//         this.bookList = document.getElementById("book-list");
//         this.searchBar = document.getElementById("search-bar") as HTMLInputElement;
//         this.filterFiction = document.getElementById("filter-fiction") as HTMLButtonElement;
//         this.filterNonFiction = document.getElementById("filter-non-fiction") as HTMLButtonElement;
//         this.clearFiltersBtn = document.getElementById("clear-filters") as HTMLButtonElement;
//         this.sortAscBtn = document.getElementById("sort-asc") as HTMLButtonElement;
//         this.sortDescBtn = document.getElementById("sort-desc") as HTMLButtonElement;

        
//     }

//     async loadBooks(filter: string = "", sortOption: string = "", genreFilter: string = ""): Promise<void> {
//         if (!this.bookList) return;

//         this.bookList.innerHTML = ""; // Clear the list first

//         try {
//             const books = await this.fetchBooks();

//             let filteredBooks = books.filter(book =>
//                 (
//                     (book.title?.toLowerCase().includes(filter.toLowerCase()) ?? false) ||
//                     (book.author?.name?.toLowerCase().includes(filter.toLowerCase()) ?? false) ||
//                     (book.genre?.name?.toLowerCase().includes(filter.toLowerCase()) ?? false)
//                 ) &&
//                 (genreFilter === "" || book.genre?.name?.toLowerCase() === genreFilter.toLowerCase())
//             );

//             if (sortOption === "asc") {
//                 filteredBooks.sort((a, b) =>
//                     a.title.toLowerCase().localeCompare(b.title.toLowerCase())
//                 );
//             } else if (sortOption === "desc") {
//                 filteredBooks.sort((a, b) =>
//                     b.title.toLowerCase().localeCompare(a.title.toLowerCase())
//                 );
//             }

//             if (filteredBooks.length === 0) {
//                 this.bookList.innerHTML = "<tr><td colspan='8'>No books found.</td></tr>";
//             } else {
//                 filteredBooks.forEach((book, index) => this.createBookRow(book, index));
//             }
//         } catch (error) {
//             console.error("Error fetching books:", error);
//             this.bookList.innerHTML = "<tr><td colspan='8'>Failed to load books. Please try again later.</td></tr>";
//         }
//     }

//     createBookRow(book: any, index: number) {
//         const bookAge = this.calculateBookAge(book.pubDate);

//         const row = document.createElement("tr");

//         row.innerHTML = `
//             <td>${book.title}</td>
//             <td>${book.author}</td>
//             <td>${book.isbn || "N/A"}</td>
//             <td>${book.pubDate || "N/A"}</td>
//             <td>${book.genre || "N/A"}</td>
//             <td>${book.bookType || "N/A"}</td>
//             <td>${book.price ? `$${book.price}` : "N/A"}</td>
//             <td>${bookAge}</td>
//             <td><a href="${book.purchaseLink}" target="_blank">Purchase</a></td>
//             <td>
//                 <div class="button-container">
//                     <button class="edit-btn" onclick="bookManager.editBook(${index})">Edit</button>
//                     <button class="delete-btn" onclick="bookManager.deleteBook(${index})">Delete</button>
//                     <button class="details-btn" onclick="bookManager.showBookDetails(${index})">Details</button>
//                 </div>
//             </td>
//         `;

//         this.bookList?.appendChild(row);
//     }

//     editBook(index: number) {
//         const books = JSON.parse(localStorage.getItem("books") || "[]");
//         const book = books[index];

//         localStorage.setItem("editBook", JSON.stringify({ book, index }));
//         window.location.href = "add-book.html";
//     }
//     static prefillForm() {
//         const editData = JSON.parse(localStorage.getItem("editBook") || "{}");

//         if (editData) {
//             const { book, index } = editData;

//             (document.getElementById("title") as HTMLInputElement).value = book.title;
//             (document.getElementById("author") as HTMLInputElement).value = book.author;
//             (document.getElementById("isbn") as HTMLInputElement).value = book.isbn;
//             (document.getElementById("pub-date") as HTMLInputElement).value = book.pubDate;
//             (document.getElementById("genre") as HTMLInputElement).value = book.genre;
//             (document.getElementById("price") as HTMLInputElement).value = book.price || "";
//             (document.getElementById("edit-index") as HTMLInputElement).value = index;

//             localStorage.removeItem("editBook");
//         }
//     }

    
//     async deleteBook(index: number) {
//         const books = JSON.parse(localStorage.getItem("books") || "[]");
//         books.splice(index, 1);
//         localStorage.setItem("books", JSON.stringify(books));
//         this.loadBooks();
//     }

//     showBookDetails(index: number) {
//         const books = JSON.parse(localStorage.getItem("books") || "[]");
//         const book = books[index];
//         const bookAge = this.calculateBookAge(book.pubDate);

//         if (book) {
//             alert(`Title: ${book.title}
//                 Author: ${book.author}
//                 ISBN: ${book.isbn || "N/A"}
//                 Publication Date: ${book.pubDate || "N/A"}
//                 Age: ${bookAge}
//                 Genre: ${book.genre || "N/A"}
//                 Book Type: ${book.bookType || "N/A"}
//                 Price: ${book.price ? `$${book.price}` : "N/A"}
//                 Purchase Link: ${book.purchaseLink}`);
//         } else {
//             alert("Book details not found.");
//         }
//     }

//     saveBook(e: Event) {
//         e.preventDefault();

//         const title = (document.getElementById("title") as HTMLInputElement).value;
//         const author = (document.getElementById("author") as HTMLInputElement).value;
//         const isbn = (document.getElementById("isbn") as HTMLInputElement).value;
//         const pubDate = (document.getElementById("pub-date") as HTMLInputElement).value;
//         const genre = (document.getElementById("genre") as HTMLInputElement).value;
//         const price = (document.getElementById("price") as HTMLInputElement).value;
//         const purchaseLink = (document.getElementById("purchase-link") as HTMLInputElement).value;
//         const bookType = (document.getElementById("book-type") as HTMLInputElement).value;

//         if (!validateISBN(isbn)) {
//             alert("ISBN must contain only numeric characters.");
//             return;
//         }

//         const books = JSON.parse(localStorage.getItem("books") || "[]");
//         const editIndex = (document.getElementById("edit-index") as HTMLInputElement).value;

//         if (editIndex !== "") {
//             books[editIndex] = { title, author, isbn, pubDate, genre, price, purchaseLink, bookType };
//         } else {
//             books.push({ title, author, isbn, pubDate, genre, price, purchaseLink, bookType });
//         }

//         localStorage.setItem("books", JSON.stringify(books));
//         alert("Book saved successfully!");
//         window.location.href = "index.html";
//     }

//     init() {
//         document.getElementById("book-form")?.addEventListener("submit", (e) => this.saveBook(e));

//         this.searchBar?.addEventListener("input", (e) => {
//             this.loadBooks((e.target as HTMLInputElement).value);
//         });

//         this.filterFiction?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "", "fiction"));
//         this.filterNonFiction?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "", "non-fiction"));

//         this.clearFiltersBtn?.addEventListener("click", () => {
//             this.searchBar!.value = "";
//             this.loadBooks();
//         });

//         this.sortAscBtn?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "asc"));
//         this.sortDescBtn?.addEventListener("click", () => this.loadBooks(this.searchBar!.value, "desc"));

//         this.loadBooks();
//     }
// }

// const bookManager = new BookManager();

// document.addEventListener("DOMContentLoaded", () => {
//     BookManager.prefillForm();
// });
